#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Please include your shannon_p2.py file. Make sure that example_output is present
in the working directory.

@author: Liam Laing
"""

import unittest
import shannon_p2 as shannon
import io
import contextlib

CORPUS_DIR = "data"


class Frequency_UT(unittest.TestCase):
    def setUp(self):
        self.data = shannon.Frequency('c', 2)

    def test_item(self):

        self.assertEqual(self.data.item, 'c')

    def test_frequency(self):
        self.assertEqual(self.data.frequency, 2)

    def test_repr(self):
        self.assertEqual(repr(self.data), "('c', 2)")


class FrequencyList_find_single_node(unittest.TestCase):
    def setUp(self):
        self.list = shannon.SortedFrequencyList()
        self.list.add("a")

    def test_sucessful_search(self):
        node = self.list.find("a")
        self.assertEqual(node.item, "a")
        self.assertEqual(node.frequency, 1)

    def test_failed_search(self):
        node = self.list.find("b")
        self.assertIsNone(node)


class FrequencyListAdd_UT(unittest.TestCase):
    def setUp(self):
        fl = shannon.SortedFrequencyList()
        fl.add('a', 1)
        fl.add('b', 1)
        fl.add('c', 1)
        fl.add('d', 1)
        self.data = fl

    def test_simple_list(self):
        self.assertEqual(repr(self.data),
                         "('a', 1) -> ('b', 1) -> ('c', 1) -> ('d', 1) ->")

    def test_update_value(self):
        self.data.add('d', 1)
        self.assertEqual(
            repr(self.data), "('d', 2) -> ('a', 1) -> ('b', 1) -> ('c', 1) ->")


class FrequencyListRemove_UT(unittest.TestCase):
    def setUp(self):
        fl = shannon.SortedFrequencyList()
        fl.add('a', 3)
        fl.add('b', 2)
        fl.add('c', 1)
        self.data = fl

    def test_sanity_check(self):
        self.assertEqual(repr(self.data),
                         "('a', 3) -> ('b', 2) -> ('c', 1) ->")

    def test_remove_middle(self):
        self.data.remove('b')
        self.assertEqual(repr(self.data), "('a', 3) -> ('c', 1) ->")


class FrequencyListFind_UT(unittest.TestCase):
    def setUp(self):
        self.data = shannon.SortedFrequencyList()
        self.data.add('a', 3)

    def test_element_in_list(self):
        self.assertEqual(repr(self.data.find('a')), "('a', 3)")

    def test_element_not_in(self):
        self.assertEqual(self.data.find('b'), None)


class PrefixItem_UT(unittest.TestCase):
    def test_simple_list(self):
        p = shannon.PrefixItem('th', shannon.SortedFrequencyList())
        p.possibles.add('e', 40)
        p.possibles.add('o', 10)
        self.assertEqual(repr(p), "'th' : ('e', 40) -> ('o', 10) ->")


class PrefixTableStore_UT(unittest.TestCase):
    def test_simple_add(self):
        p = shannon.PrefixTable(1)
        self.assertTrue(p.store('th', shannon.SortedFrequencyList()))
        self.assertFalse(p.store('ca', shannon.SortedFrequencyList()))


class PrefixTableFetch_UT(unittest.TestCase):
    def setUp(self):
        fl = shannon.SortedFrequencyList()
        fl.add('e', 40)
        fl.add('o', 10)
        self.data = shannon.PrefixTable(1)
        self.data.store('th', fl)

    def test_sucessful_lookup(self):
        self.assertEqual(repr(self.data.fetch("th")),
                         "('e', 40) -> ('o', 10) ->")

    def test_failed_lookup(self):
        self.assertIsNone(self.data.fetch('ca'))


class ProcessCorpus_UT(unittest.TestCase):
    def test_phrase1(self):
        corpus = 'lazy languid line'
        ht = shannon.process_corpus(corpus, len(set(corpus)))

        with open("expected_results/expected1.txt") as file:
            expected = file.read()
        self.assertEqual(repr(ht).strip(), expected.strip())

    def test_phrase2(self):
        corpus = 'pitter patter'
        ht = shannon.process_corpus(corpus, len(set(corpus)))

        with open("expected_results/expected2.txt") as file:
            expected = file.read()
        self.assertEqual(repr(ht).strip(), expected.strip())

    def test_phrase3(self):
        corpus = 'riff raff'
        ht = shannon.process_corpus(corpus, len(set(corpus)))

        with open("expected_results/expected3.txt") as file:
            expected = file.read()
        self.assertEqual(repr(ht).strip(), expected.strip())


class LoadCorpusAndPlay_cached_example(unittest.TestCase):
    def setUp(self):
        self.maxDiff = None
        with open("expected_results/LoadCorpusAndPlay_cached_example.txt") as file:
            lines = file.read().splitlines()
        lines.pop()  # remove time taken as it varies from run to run of the test
        self.expected = lines

    def test_compare_results(self):
        """Simply compares the results generated by your program vs results generated by the question author.
        """
        output = io.StringIO()
        with contextlib.redirect_stdout(output):
            filename = 'the-yellow-wall-paper.txt'
            phrase = 'document test phrase'
            shannon.load_corpus_and_play(f"{CORPUS_DIR}/{filename}", phrase)
        got = output.getvalue().splitlines()
        got.pop()
        self.assertEqual(self.expected, got)


def all_tests():
    suite = unittest.TestSuite()

    suite.addTest(unittest.makeSuite(Frequency_UT))
    suite.addTest(unittest.makeSuite(FrequencyList_find_single_node))
    suite.addTest(unittest.makeSuite(FrequencyListAdd_UT))
    suite.addTest(unittest.makeSuite(FrequencyListRemove_UT))
    suite.addTest(unittest.makeSuite(FrequencyListFind_UT))
    suite.addTest(unittest.makeSuite(PrefixItem_UT))
    suite.addTest(unittest.makeSuite(PrefixTableStore_UT))
    suite.addTest(unittest.makeSuite(PrefixTableFetch_UT))
    suite.addTest(unittest.makeSuite(ProcessCorpus_UT))
    suite.addTest(unittest.makeSuite(LoadCorpusAndPlay_cached_example))
    return suite


def main():
    test_runner = unittest.TextTestRunner()
    test_runner.run(all_tests())


main()
